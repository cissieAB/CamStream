# Generated by ChatGPT. Needs modification

import cv2
import threading
from flask import Flask, Response
from picamera.array import PiRGBArray
from picamera import PiCamera
from pylepton import Lepton
import numpy as np

app = Flask(__name__)
video_stream_thermal = None
video_stream_color = None

# Raspberry Pi Camera Module setup
camera = PiCamera()
camera.resolution = (640, 480)
camera.framerate = 24
rawCapture = PiRGBArray(camera, size=(640, 480))

# FLIR Lepton thermal camera setup
lepton = Lepton()

def capture_color():
    global video_stream_color
    for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
        image = frame.array   
        # Process image if needed

        video_stream_color = image  
        rawCapture.truncate(0)

def capture_thermal():
    global video_stream_thermal
    for _ in lepton.capture_generator():
        thermal_data, _ = lepton.capture()
        # Process thermal data if needed
        # Convert to image format (optional, if needed)
        thermal_image = cv2.normalize(thermal_data, None, 0, 255, cv2.NORM_MINMAX)
        thermal_image = cv2.resize(thermal_image, (640, 480))
        video_stream_thermal = thermal_image

@app.route('/get_color')
def get_color():
    return Response(generate_frames('color'), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/get_thermal')
def get_thermal():
    return Response(generate_frames('thermal'), mimetype='multipart/x-mixed-replace; boundary=frame')

def generate_frames(camera_type):
    global video_stream_color, video_stream_thermal
    while True:
        if camera_type == 'color' and video_stream_color is not None:
            frame = video_stream_color.copy()
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # Convert to RGB if needed
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame.tobytes() + b'\r\n')
        elif camera_type == 'thermal' and video_stream_thermal is not None:
            frame = video_stream_thermal.copy()
            frame = cv2.cvtColor(frame, cv2.COLOR_GRAY2RGB)  # Convert to RGB if needed
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame.tobytes() + b'\r\n')

if __name__ == '__main__':
    # Start capturing threads for both cameras
    threading.Thread(target=capture_color).start()
    threading.Thread(target=capture_thermal).start()

    # Start Flask web server to serve the video streams
    app.run(host='0.0.0.0', port=8000, debug=True, threaded=True)
